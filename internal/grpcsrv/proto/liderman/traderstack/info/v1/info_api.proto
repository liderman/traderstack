syntax = "proto3";

package liderman.traderstack.info.v1;

option csharp_namespace = "Liderman.Traderstack.Info.V1";
option go_package = "infov1";
option java_multiple_files = true;
option java_outer_classname = "InfoApiProto";
option java_package = "com.liderman.traderstack.info.v1";
option objc_class_prefix = "LTI";
option php_namespace = "Liderman\\Traderstack\\Info\\V1";

import "liderman/traderstack/info/v1/info.proto";

// API получения справочной информации.
service InfoAPI {
  // Ищет финансовые инструменты.
  rpc SearchInstrument(SearchInstrumentRequest) returns (SearchInstrumentResponse);
  // Возвращает список аккаунтов.
  rpc Accounts(AccountsRequest) returns (AccountsResponse);
  // Возвращает список аккаунтов для песочницы.
  rpc SandboxAccounts(SandboxAccountsRequest) returns (SandboxAccountsResponse);
  // Создаёт новый аккаунт для песочницы.
  rpc OpenSandboxAccount(OpenSandboxAccountRequest) returns (OpenSandboxAccountResponse);
  // Получение позиций для песочницы.
  rpc GetSandboxPositions(GetSandboxPositionsRequest) returns (GetSandboxPositionsResponse);
  // Пополнение баланса для песочницы.
  rpc SandboxPayIn(SandboxPayInRequest) returns (SandboxPayInResponse);
}

message SearchInstrumentRequest {
  string ticker = 1;
}

message SearchInstrumentResponse {
  repeated Instrument instruments = 1;
}

message AccountsRequest {
}

message AccountsResponse {
  repeated Account accounts = 1;
}

message SandboxAccountsRequest {
}

message SandboxAccountsResponse {
  repeated Account accounts = 1;
}

message OpenSandboxAccountRequest {
}

message OpenSandboxAccountResponse {
  string account_id = 1;
}

message GetSandboxPositionsRequest {
  string account_id = 1;
}

message GetSandboxPositionsResponse {
  repeated Money money = 1;
}

message SandboxPayInRequest {
  string account_id = 1;
  string amount = 2;
}

message SandboxPayInResponse {
}