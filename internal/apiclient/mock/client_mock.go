// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/liderman/traderstack/internal/domain"
	decimal "github.com/shopspring/decimal"
)

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// GetCandles mocks base method.
func (m *MockApiClient) GetCandles(figi string, from, to time.Time, interval domain.CandleInterval) ([]*domain.HistoricCandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandles", figi, from, to, interval)
	ret0, _ := ret[0].([]*domain.HistoricCandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandles indicates an expected call of GetCandles.
func (mr *MockApiClientMockRecorder) GetCandles(figi, from, to, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandles", reflect.TypeOf((*MockApiClient)(nil).GetCandles), figi, from, to, interval)
}

// GetShares mocks base method.
func (m *MockApiClient) GetShares() ([]*domain.Share, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShares")
	ret0, _ := ret[0].([]*domain.Share)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShares indicates an expected call of GetShares.
func (mr *MockApiClientMockRecorder) GetShares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShares", reflect.TypeOf((*MockApiClient)(nil).GetShares))
}

// PostOrder mocks base method.
func (m *MockApiClient) PostOrder(figi string, lots int64, price decimal.Decimal, direction domain.OrderDirection, accountId string, orderType domain.OrderType) (*domain.PostOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostOrder", figi, lots, price, direction, accountId, orderType)
	ret0, _ := ret[0].(*domain.PostOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostOrder indicates an expected call of PostOrder.
func (mr *MockApiClientMockRecorder) PostOrder(figi, lots, price, direction, accountId, orderType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostOrder", reflect.TypeOf((*MockApiClient)(nil).PostOrder), figi, lots, price, direction, accountId, orderType)
}
