/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.Argument', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.Item', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.SetArgument', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.SetItem', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.SetStackFunc', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.Stack', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.StackFunc', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.TestItemResult', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.Value', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.Variable', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.Stack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.stack.v1.Stack.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.Stack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.Stack.displayName = 'proto.liderman.traderstack.stack.v1.Stack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.Item.displayName = 'proto.liderman.traderstack.stack.v1.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.StackFunc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.stack.v1.StackFunc.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.StackFunc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.StackFunc.displayName = 'proto.liderman.traderstack.stack.v1.StackFunc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.Argument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.liderman.traderstack.stack.v1.Argument.oneofGroups_);
};
goog.inherits(proto.liderman.traderstack.stack.v1.Argument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.Argument.displayName = 'proto.liderman.traderstack.stack.v1.Argument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.liderman.traderstack.stack.v1.Value.oneofGroups_);
};
goog.inherits(proto.liderman.traderstack.stack.v1.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.Value.displayName = 'proto.liderman.traderstack.stack.v1.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.Variable.displayName = 'proto.liderman.traderstack.stack.v1.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.SetItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.SetItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.SetItem.displayName = 'proto.liderman.traderstack.stack.v1.SetItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.SetStackFunc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.stack.v1.SetStackFunc.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.SetStackFunc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.SetStackFunc.displayName = 'proto.liderman.traderstack.stack.v1.SetStackFunc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.SetArgument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.liderman.traderstack.stack.v1.SetArgument.oneofGroups_);
};
goog.inherits(proto.liderman.traderstack.stack.v1.SetArgument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.SetArgument.displayName = 'proto.liderman.traderstack.stack.v1.SetArgument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.TestItemResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.TestItemResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.TestItemResult.displayName = 'proto.liderman.traderstack.stack.v1.TestItemResult';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.stack.v1.Stack.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.Stack.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.Stack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.Stack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Stack.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.liderman.traderstack.stack.v1.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.Stack}
 */
proto.liderman.traderstack.stack.v1.Stack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.Stack;
  return proto.liderman.traderstack.stack.v1.Stack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.Stack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.Stack}
 */
proto.liderman.traderstack.stack.v1.Stack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.liderman.traderstack.stack.v1.Item;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.Stack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.Stack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.Stack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Stack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.liderman.traderstack.stack.v1.Item.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Stack.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Stack.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Stack.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Stack.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Item items = 3;
 * @return {!Array<!proto.liderman.traderstack.stack.v1.Item>}
 */
proto.liderman.traderstack.stack.v1.Stack.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.stack.v1.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.liderman.traderstack.stack.v1.Item, 3));
};


/** @param {!Array<!proto.liderman.traderstack.stack.v1.Item>} value */
proto.liderman.traderstack.stack.v1.Stack.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.liderman.traderstack.stack.v1.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.stack.v1.Item}
 */
proto.liderman.traderstack.stack.v1.Stack.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.liderman.traderstack.stack.v1.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.stack.v1.Stack.prototype.clearItemsList = function() {
  this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    variable: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stackFunc: (f = msg.getStackFunc()) && proto.liderman.traderstack.stack.v1.StackFunc.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.Item}
 */
proto.liderman.traderstack.stack.v1.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.Item;
  return proto.liderman.traderstack.stack.v1.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.Item}
 */
proto.liderman.traderstack.stack.v1.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariable(value);
      break;
    case 2:
      var value = new proto.liderman.traderstack.stack.v1.StackFunc;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.StackFunc.deserializeBinaryFromReader);
      msg.setStackFunc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStackFunc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.liderman.traderstack.stack.v1.StackFunc.serializeBinaryToWriter
    );
  }
};


/**
 * optional string variable = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Item.prototype.getVariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Item.prototype.setVariable = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StackFunc stack_func = 2;
 * @return {?proto.liderman.traderstack.stack.v1.StackFunc}
 */
proto.liderman.traderstack.stack.v1.Item.prototype.getStackFunc = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.StackFunc} */ (
    jspb.Message.getWrapperField(this, proto.liderman.traderstack.stack.v1.StackFunc, 2));
};


/** @param {?proto.liderman.traderstack.stack.v1.StackFunc|undefined} value */
proto.liderman.traderstack.stack.v1.Item.prototype.setStackFunc = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.Item.prototype.clearStackFunc = function() {
  this.setStackFunc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Item.prototype.hasStackFunc = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.stack.v1.StackFunc.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.StackFunc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.StackFunc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.StackFunc.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.liderman.traderstack.stack.v1.Argument.toObject, includeInstance),
    baseType: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.StackFunc}
 */
proto.liderman.traderstack.stack.v1.StackFunc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.StackFunc;
  return proto.liderman.traderstack.stack.v1.StackFunc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.StackFunc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.StackFunc}
 */
proto.liderman.traderstack.stack.v1.StackFunc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.liderman.traderstack.stack.v1.Argument;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.Argument.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.StackFunc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.StackFunc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.StackFunc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.liderman.traderstack.stack.v1.Argument.serializeBinaryToWriter
    );
  }
  f = message.getBaseType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Argument arguments = 2;
 * @return {!Array<!proto.liderman.traderstack.stack.v1.Argument>}
 */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.stack.v1.Argument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.liderman.traderstack.stack.v1.Argument, 2));
};


/** @param {!Array<!proto.liderman.traderstack.stack.v1.Argument>} value */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.setArgumentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.liderman.traderstack.stack.v1.Argument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.stack.v1.Argument}
 */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.liderman.traderstack.stack.v1.Argument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.clearArgumentsList = function() {
  this.setArgumentsList([]);
};


/**
 * optional string base_type = 3;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.getBaseType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.StackFunc.prototype.setBaseType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.liderman.traderstack.stack.v1.Argument.oneofGroups_ = [[7,8]];

/**
 * @enum {number}
 */
proto.liderman.traderstack.stack.v1.Argument.ValueCase = {
  VALUE_NOT_SET: 0,
  INPUT: 7,
  VARIABLE: 8
};

/**
 * @return {proto.liderman.traderstack.stack.v1.Argument.ValueCase}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getValueCase = function() {
  return /** @type {proto.liderman.traderstack.stack.v1.Argument.ValueCase} */(jspb.Message.computeOneofCase(this, proto.liderman.traderstack.stack.v1.Argument.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.Argument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.Argument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Argument.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    baseType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    extendedType: jspb.Message.getFieldWithDefault(msg, 5, ""),
    required: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    input: (f = msg.getInput()) && proto.liderman.traderstack.stack.v1.Value.toObject(includeInstance, f),
    variable: (f = msg.getVariable()) && proto.liderman.traderstack.stack.v1.Variable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.Argument}
 */
proto.liderman.traderstack.stack.v1.Argument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.Argument;
  return proto.liderman.traderstack.stack.v1.Argument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.Argument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.Argument}
 */
proto.liderman.traderstack.stack.v1.Argument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtendedType(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequired(value);
      break;
    case 7:
      var value = new proto.liderman.traderstack.stack.v1.Value;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.Value.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 8:
      var value = new proto.liderman.traderstack.stack.v1.Variable;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.Argument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.Argument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Argument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBaseType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExtendedType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRequired();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.liderman.traderstack.stack.v1.Value.serializeBinaryToWriter
    );
  }
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.liderman.traderstack.stack.v1.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Argument.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Argument.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Argument.prototype.setDesc = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string base_type = 4;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getBaseType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Argument.prototype.setBaseType = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string extended_type = 5;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getExtendedType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Argument.prototype.setExtendedType = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool required = 6;
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.liderman.traderstack.stack.v1.Argument.prototype.setRequired = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional Value input = 7;
 * @return {?proto.liderman.traderstack.stack.v1.Value}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getInput = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.Value} */ (
    jspb.Message.getWrapperField(this, proto.liderman.traderstack.stack.v1.Value, 7));
};


/** @param {?proto.liderman.traderstack.stack.v1.Value|undefined} value */
proto.liderman.traderstack.stack.v1.Argument.prototype.setInput = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.liderman.traderstack.stack.v1.Argument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.hasInput = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Variable variable = 8;
 * @return {?proto.liderman.traderstack.stack.v1.Variable}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.getVariable = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.Variable} */ (
    jspb.Message.getWrapperField(this, proto.liderman.traderstack.stack.v1.Variable, 8));
};


/** @param {?proto.liderman.traderstack.stack.v1.Variable|undefined} value */
proto.liderman.traderstack.stack.v1.Argument.prototype.setVariable = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.liderman.traderstack.stack.v1.Argument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.clearVariable = function() {
  this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Argument.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.liderman.traderstack.stack.v1.Value.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.liderman.traderstack.stack.v1.Value.ValCase = {
  VAL_NOT_SET: 0,
  STRING: 1,
  INTEGER: 2,
  DECIMAL: 3,
  BOOLEAN: 4,
  TIME: 5
};

/**
 * @return {proto.liderman.traderstack.stack.v1.Value.ValCase}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.getValCase = function() {
  return /** @type {proto.liderman.traderstack.stack.v1.Value.ValCase} */(jspb.Message.computeOneofCase(this, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    string: jspb.Message.getFieldWithDefault(msg, 1, ""),
    integer: jspb.Message.getFieldWithDefault(msg, 2, 0),
    decimal: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pb_boolean: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.Value}
 */
proto.liderman.traderstack.stack.v1.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.Value;
  return proto.liderman.traderstack.stack.v1.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.Value}
 */
proto.liderman.traderstack.stack.v1.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInteger(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecimal(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string string = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Value.prototype.setString = function(value) {
  jspb.Message.setOneofField(this, 1, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.liderman.traderstack.stack.v1.Value.prototype.clearString = function() {
  jspb.Message.setOneofField(this, 1, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.hasString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 integer = 2;
 * @return {number}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.getInteger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.liderman.traderstack.stack.v1.Value.prototype.setInteger = function(value) {
  jspb.Message.setOneofField(this, 2, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.liderman.traderstack.stack.v1.Value.prototype.clearInteger = function() {
  jspb.Message.setOneofField(this, 2, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.hasInteger = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string decimal = 3;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.getDecimal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Value.prototype.setDecimal = function(value) {
  jspb.Message.setOneofField(this, 3, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.liderman.traderstack.stack.v1.Value.prototype.clearDecimal = function() {
  jspb.Message.setOneofField(this, 3, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.hasDecimal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool boolean = 4;
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.liderman.traderstack.stack.v1.Value.prototype.setBoolean = function(value) {
  jspb.Message.setOneofField(this, 4, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.liderman.traderstack.stack.v1.Value.prototype.clearBoolean = function() {
  jspb.Message.setOneofField(this, 4, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.liderman.traderstack.stack.v1.Value.prototype.setTime = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.liderman.traderstack.stack.v1.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.Value.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.Value.prototype.hasTime = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.Variable}
 */
proto.liderman.traderstack.stack.v1.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.Variable;
  return proto.liderman.traderstack.stack.v1.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.Variable}
 */
proto.liderman.traderstack.stack.v1.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.Variable.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.SetItem.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.SetItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.SetItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.SetItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    variable: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stackFunc: (f = msg.getStackFunc()) && proto.liderman.traderstack.stack.v1.SetStackFunc.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.SetItem}
 */
proto.liderman.traderstack.stack.v1.SetItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.SetItem;
  return proto.liderman.traderstack.stack.v1.SetItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.SetItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.SetItem}
 */
proto.liderman.traderstack.stack.v1.SetItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariable(value);
      break;
    case 2:
      var value = new proto.liderman.traderstack.stack.v1.SetStackFunc;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.SetStackFunc.deserializeBinaryFromReader);
      msg.setStackFunc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.SetItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.SetItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.SetItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.SetItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStackFunc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.liderman.traderstack.stack.v1.SetStackFunc.serializeBinaryToWriter
    );
  }
};


/**
 * optional string variable = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.SetItem.prototype.getVariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.SetItem.prototype.setVariable = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SetStackFunc stack_func = 2;
 * @return {?proto.liderman.traderstack.stack.v1.SetStackFunc}
 */
proto.liderman.traderstack.stack.v1.SetItem.prototype.getStackFunc = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.SetStackFunc} */ (
    jspb.Message.getWrapperField(this, proto.liderman.traderstack.stack.v1.SetStackFunc, 2));
};


/** @param {?proto.liderman.traderstack.stack.v1.SetStackFunc|undefined} value */
proto.liderman.traderstack.stack.v1.SetItem.prototype.setStackFunc = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.SetItem.prototype.clearStackFunc = function() {
  this.setStackFunc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.SetItem.prototype.hasStackFunc = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.SetStackFunc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.SetStackFunc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.liderman.traderstack.stack.v1.SetArgument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.SetStackFunc}
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.SetStackFunc;
  return proto.liderman.traderstack.stack.v1.SetStackFunc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.SetStackFunc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.SetStackFunc}
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.liderman.traderstack.stack.v1.SetArgument;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.SetArgument.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.SetStackFunc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.SetStackFunc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.liderman.traderstack.stack.v1.SetArgument.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.SetStackFunc.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated SetArgument arguments = 2;
 * @return {!Array<!proto.liderman.traderstack.stack.v1.SetArgument>}
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.stack.v1.SetArgument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.liderman.traderstack.stack.v1.SetArgument, 2));
};


/** @param {!Array<!proto.liderman.traderstack.stack.v1.SetArgument>} value */
proto.liderman.traderstack.stack.v1.SetStackFunc.prototype.setArgumentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.liderman.traderstack.stack.v1.SetArgument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.stack.v1.SetArgument}
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.liderman.traderstack.stack.v1.SetArgument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.stack.v1.SetStackFunc.prototype.clearArgumentsList = function() {
  this.setArgumentsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.liderman.traderstack.stack.v1.SetArgument.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.liderman.traderstack.stack.v1.SetArgument.ValueCase = {
  VALUE_NOT_SET: 0,
  INPUT: 2,
  VARIABLE: 3
};

/**
 * @return {proto.liderman.traderstack.stack.v1.SetArgument.ValueCase}
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.getValueCase = function() {
  return /** @type {proto.liderman.traderstack.stack.v1.SetArgument.ValueCase} */(jspb.Message.computeOneofCase(this, proto.liderman.traderstack.stack.v1.SetArgument.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.SetArgument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.SetArgument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.SetArgument.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    input: (f = msg.getInput()) && proto.liderman.traderstack.stack.v1.Value.toObject(includeInstance, f),
    variable: (f = msg.getVariable()) && proto.liderman.traderstack.stack.v1.Variable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.SetArgument}
 */
proto.liderman.traderstack.stack.v1.SetArgument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.SetArgument;
  return proto.liderman.traderstack.stack.v1.SetArgument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.SetArgument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.SetArgument}
 */
proto.liderman.traderstack.stack.v1.SetArgument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.liderman.traderstack.stack.v1.Value;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.Value.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 3:
      var value = new proto.liderman.traderstack.stack.v1.Variable;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.Variable.deserializeBinaryFromReader);
      msg.setVariable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.SetArgument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.SetArgument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.SetArgument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.liderman.traderstack.stack.v1.Value.serializeBinaryToWriter
    );
  }
  f = message.getVariable();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.liderman.traderstack.stack.v1.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value input = 2;
 * @return {?proto.liderman.traderstack.stack.v1.Value}
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.getInput = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.Value} */ (
    jspb.Message.getWrapperField(this, proto.liderman.traderstack.stack.v1.Value, 2));
};


/** @param {?proto.liderman.traderstack.stack.v1.Value|undefined} value */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.setInput = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.liderman.traderstack.stack.v1.SetArgument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.hasInput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Variable variable = 3;
 * @return {?proto.liderman.traderstack.stack.v1.Variable}
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.getVariable = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.Variable} */ (
    jspb.Message.getWrapperField(this, proto.liderman.traderstack.stack.v1.Variable, 3));
};


/** @param {?proto.liderman.traderstack.stack.v1.Variable|undefined} value */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.setVariable = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.liderman.traderstack.stack.v1.SetArgument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.clearVariable = function() {
  this.setVariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.SetArgument.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.TestItemResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.TestItemResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.TestItemResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    variable: jspb.Message.getFieldWithDefault(msg, 1, ""),
    result: (f = msg.getResult()) && proto.liderman.traderstack.stack.v1.Value.toObject(includeInstance, f),
    baseType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    error: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.TestItemResult}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.TestItemResult;
  return proto.liderman.traderstack.stack.v1.TestItemResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.TestItemResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.TestItemResult}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariable(value);
      break;
    case 2:
      var value = new proto.liderman.traderstack.stack.v1.Value;
      reader.readMessage(value,proto.liderman.traderstack.stack.v1.Value.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.TestItemResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.TestItemResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.TestItemResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariable();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.liderman.traderstack.stack.v1.Value.serializeBinaryToWriter
    );
  }
  f = message.getBaseType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string variable = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.getVariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.setVariable = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value result = 2;
 * @return {?proto.liderman.traderstack.stack.v1.Value}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.getResult = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.Value} */ (
    jspb.Message.getWrapperField(this, proto.liderman.traderstack.stack.v1.Value, 2));
};


/** @param {?proto.liderman.traderstack.stack.v1.Value|undefined} value */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string base_type = 3;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.getBaseType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.setBaseType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string error = 4;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.TestItemResult.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.liderman.traderstack.stack.v1);
