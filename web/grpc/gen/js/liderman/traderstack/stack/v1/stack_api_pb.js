/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var liderman_traderstack_stack_v1_stack_pb = require('../../../../liderman/traderstack/stack/v1/stack_pb.js');
goog.object.extend(proto, liderman_traderstack_stack_v1_stack_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.CreateRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.CreateResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.DeleteRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.DeleteResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.FuncListRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.FuncListResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.GetAllRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.GetAllResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.GetRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.GetResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.TestRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.TestResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.UpdateRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.stack.v1.UpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.CreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.CreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.CreateRequest.displayName = 'proto.liderman.traderstack.stack.v1.CreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.CreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.CreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.CreateResponse.displayName = 'proto.liderman.traderstack.stack.v1.CreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.stack.v1.UpdateRequest.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.UpdateRequest.displayName = 'proto.liderman.traderstack.stack.v1.UpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.UpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.UpdateResponse.displayName = 'proto.liderman.traderstack.stack.v1.UpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.DeleteRequest.displayName = 'proto.liderman.traderstack.stack.v1.DeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.DeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.DeleteResponse.displayName = 'proto.liderman.traderstack.stack.v1.DeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.GetRequest.displayName = 'proto.liderman.traderstack.stack.v1.GetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.GetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.GetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.GetResponse.displayName = 'proto.liderman.traderstack.stack.v1.GetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.GetAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.GetAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.GetAllRequest.displayName = 'proto.liderman.traderstack.stack.v1.GetAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.GetAllResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.stack.v1.GetAllResponse.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.GetAllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.GetAllResponse.displayName = 'proto.liderman.traderstack.stack.v1.GetAllResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.TestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.TestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.TestRequest.displayName = 'proto.liderman.traderstack.stack.v1.TestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.TestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.stack.v1.TestResponse.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.TestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.TestResponse.displayName = 'proto.liderman.traderstack.stack.v1.TestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.FuncListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.FuncListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.FuncListRequest.displayName = 'proto.liderman.traderstack.stack.v1.FuncListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.FuncListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.stack.v1.FuncListResponse.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.FuncListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.FuncListResponse.displayName = 'proto.liderman.traderstack.stack.v1.FuncListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.displayName = 'proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.displayName = 'proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.CreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.CreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.CreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.CreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.CreateRequest}
 */
proto.liderman.traderstack.stack.v1.CreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.CreateRequest;
  return proto.liderman.traderstack.stack.v1.CreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.CreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.CreateRequest}
 */
proto.liderman.traderstack.stack.v1.CreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.CreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.CreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.CreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.CreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.CreateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.CreateRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.CreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.CreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.CreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.CreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stack: (f = msg.getStack()) && liderman_traderstack_stack_v1_stack_pb.Stack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.CreateResponse}
 */
proto.liderman.traderstack.stack.v1.CreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.CreateResponse;
  return proto.liderman.traderstack.stack.v1.CreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.CreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.CreateResponse}
 */
proto.liderman.traderstack.stack.v1.CreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_stack_v1_stack_pb.Stack;
      reader.readMessage(value,liderman_traderstack_stack_v1_stack_pb.Stack.deserializeBinaryFromReader);
      msg.setStack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.CreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.CreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.CreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.CreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      liderman_traderstack_stack_v1_stack_pb.Stack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stack stack = 1;
 * @return {?proto.liderman.traderstack.stack.v1.Stack}
 */
proto.liderman.traderstack.stack.v1.CreateResponse.prototype.getStack = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.Stack} */ (
    jspb.Message.getWrapperField(this, liderman_traderstack_stack_v1_stack_pb.Stack, 1));
};


/** @param {?proto.liderman.traderstack.stack.v1.Stack|undefined} value */
proto.liderman.traderstack.stack.v1.CreateResponse.prototype.setStack = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.CreateResponse.prototype.clearStack = function() {
  this.setStack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.CreateResponse.prototype.hasStack = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    liderman_traderstack_stack_v1_stack_pb.SetItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.UpdateRequest}
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.UpdateRequest;
  return proto.liderman.traderstack.stack.v1.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.UpdateRequest}
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new liderman_traderstack_stack_v1_stack_pb.SetItem;
      reader.readMessage(value,liderman_traderstack_stack_v1_stack_pb.SetItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.UpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      liderman_traderstack_stack_v1_stack_pb.SetItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SetItem items = 3;
 * @return {!Array<!proto.liderman.traderstack.stack.v1.SetItem>}
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.stack.v1.SetItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, liderman_traderstack_stack_v1_stack_pb.SetItem, 3));
};


/** @param {!Array<!proto.liderman.traderstack.stack.v1.SetItem>} value */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.liderman.traderstack.stack.v1.SetItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.stack.v1.SetItem}
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.liderman.traderstack.stack.v1.SetItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.stack.v1.UpdateRequest.prototype.clearItemsList = function() {
  this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.UpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.UpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stack: (f = msg.getStack()) && liderman_traderstack_stack_v1_stack_pb.Stack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.UpdateResponse}
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.UpdateResponse;
  return proto.liderman.traderstack.stack.v1.UpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.UpdateResponse}
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_stack_v1_stack_pb.Stack;
      reader.readMessage(value,liderman_traderstack_stack_v1_stack_pb.Stack.deserializeBinaryFromReader);
      msg.setStack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.UpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      liderman_traderstack_stack_v1_stack_pb.Stack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stack stack = 1;
 * @return {?proto.liderman.traderstack.stack.v1.Stack}
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.prototype.getStack = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.Stack} */ (
    jspb.Message.getWrapperField(this, liderman_traderstack_stack_v1_stack_pb.Stack, 1));
};


/** @param {?proto.liderman.traderstack.stack.v1.Stack|undefined} value */
proto.liderman.traderstack.stack.v1.UpdateResponse.prototype.setStack = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.prototype.clearStack = function() {
  this.setStack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.UpdateResponse.prototype.hasStack = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.DeleteRequest}
 */
proto.liderman.traderstack.stack.v1.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.DeleteRequest;
  return proto.liderman.traderstack.stack.v1.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.DeleteRequest}
 */
proto.liderman.traderstack.stack.v1.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.DeleteRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.DeleteRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.DeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.DeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.DeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.DeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.DeleteResponse}
 */
proto.liderman.traderstack.stack.v1.DeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.DeleteResponse;
  return proto.liderman.traderstack.stack.v1.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.DeleteResponse}
 */
proto.liderman.traderstack.stack.v1.DeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.DeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.DeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.DeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.GetRequest}
 */
proto.liderman.traderstack.stack.v1.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.GetRequest;
  return proto.liderman.traderstack.stack.v1.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.GetRequest}
 */
proto.liderman.traderstack.stack.v1.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.GetRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.GetRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.GetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.GetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.GetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.GetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stack: (f = msg.getStack()) && liderman_traderstack_stack_v1_stack_pb.Stack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.GetResponse}
 */
proto.liderman.traderstack.stack.v1.GetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.GetResponse;
  return proto.liderman.traderstack.stack.v1.GetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.GetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.GetResponse}
 */
proto.liderman.traderstack.stack.v1.GetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_stack_v1_stack_pb.Stack;
      reader.readMessage(value,liderman_traderstack_stack_v1_stack_pb.Stack.deserializeBinaryFromReader);
      msg.setStack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.GetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.GetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.GetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.GetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      liderman_traderstack_stack_v1_stack_pb.Stack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stack stack = 1;
 * @return {?proto.liderman.traderstack.stack.v1.Stack}
 */
proto.liderman.traderstack.stack.v1.GetResponse.prototype.getStack = function() {
  return /** @type{?proto.liderman.traderstack.stack.v1.Stack} */ (
    jspb.Message.getWrapperField(this, liderman_traderstack_stack_v1_stack_pb.Stack, 1));
};


/** @param {?proto.liderman.traderstack.stack.v1.Stack|undefined} value */
proto.liderman.traderstack.stack.v1.GetResponse.prototype.setStack = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.GetResponse.prototype.clearStack = function() {
  this.setStack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.GetResponse.prototype.hasStack = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.GetAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.GetAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.GetAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.GetAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.GetAllRequest}
 */
proto.liderman.traderstack.stack.v1.GetAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.GetAllRequest;
  return proto.liderman.traderstack.stack.v1.GetAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.GetAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.GetAllRequest}
 */
proto.liderman.traderstack.stack.v1.GetAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.GetAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.GetAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.GetAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.GetAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.GetAllResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.GetAllResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stacksList: jspb.Message.toObjectList(msg.getStacksList(),
    liderman_traderstack_stack_v1_stack_pb.Stack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.GetAllResponse}
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.GetAllResponse;
  return proto.liderman.traderstack.stack.v1.GetAllResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.GetAllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.GetAllResponse}
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_stack_v1_stack_pb.Stack;
      reader.readMessage(value,liderman_traderstack_stack_v1_stack_pb.Stack.deserializeBinaryFromReader);
      msg.addStacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.GetAllResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.GetAllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStacksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      liderman_traderstack_stack_v1_stack_pb.Stack.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stack stacks = 1;
 * @return {!Array<!proto.liderman.traderstack.stack.v1.Stack>}
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.prototype.getStacksList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.stack.v1.Stack>} */ (
    jspb.Message.getRepeatedWrapperField(this, liderman_traderstack_stack_v1_stack_pb.Stack, 1));
};


/** @param {!Array<!proto.liderman.traderstack.stack.v1.Stack>} value */
proto.liderman.traderstack.stack.v1.GetAllResponse.prototype.setStacksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.liderman.traderstack.stack.v1.Stack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.stack.v1.Stack}
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.prototype.addStacks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.liderman.traderstack.stack.v1.Stack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.stack.v1.GetAllResponse.prototype.clearStacksList = function() {
  this.setStacksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.TestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.TestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.TestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    accountId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.TestRequest}
 */
proto.liderman.traderstack.stack.v1.TestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.TestRequest;
  return proto.liderman.traderstack.stack.v1.TestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.TestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.TestRequest}
 */
proto.liderman.traderstack.stack.v1.TestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.TestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.TestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.TestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string account_id = 3;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.TestRequest.prototype.setAccountId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.stack.v1.TestResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.TestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.TestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.TestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.TestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    liderman_traderstack_stack_v1_stack_pb.TestItemResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.TestResponse}
 */
proto.liderman.traderstack.stack.v1.TestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.TestResponse;
  return proto.liderman.traderstack.stack.v1.TestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.TestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.TestResponse}
 */
proto.liderman.traderstack.stack.v1.TestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_stack_v1_stack_pb.TestItemResult;
      reader.readMessage(value,liderman_traderstack_stack_v1_stack_pb.TestItemResult.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.TestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.TestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.TestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.TestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      liderman_traderstack_stack_v1_stack_pb.TestItemResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TestItemResult result = 1;
 * @return {!Array<!proto.liderman.traderstack.stack.v1.TestItemResult>}
 */
proto.liderman.traderstack.stack.v1.TestResponse.prototype.getResultList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.stack.v1.TestItemResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, liderman_traderstack_stack_v1_stack_pb.TestItemResult, 1));
};


/** @param {!Array<!proto.liderman.traderstack.stack.v1.TestItemResult>} value */
proto.liderman.traderstack.stack.v1.TestResponse.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.liderman.traderstack.stack.v1.TestItemResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.stack.v1.TestItemResult}
 */
proto.liderman.traderstack.stack.v1.TestResponse.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.liderman.traderstack.stack.v1.TestItemResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.stack.v1.TestResponse.prototype.clearResultList = function() {
  this.setResultList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.FuncListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.FuncListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.FuncListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.FuncListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.FuncListRequest}
 */
proto.liderman.traderstack.stack.v1.FuncListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.FuncListRequest;
  return proto.liderman.traderstack.stack.v1.FuncListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.FuncListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.FuncListRequest}
 */
proto.liderman.traderstack.stack.v1.FuncListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.FuncListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.FuncListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.FuncListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.FuncListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.FuncListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.FuncListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    funcList: jspb.Message.toObjectList(msg.getFuncList(),
    liderman_traderstack_stack_v1_stack_pb.StackFunc.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.FuncListResponse}
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.FuncListResponse;
  return proto.liderman.traderstack.stack.v1.FuncListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.FuncListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.FuncListResponse}
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_stack_v1_stack_pb.StackFunc;
      reader.readMessage(value,liderman_traderstack_stack_v1_stack_pb.StackFunc.deserializeBinaryFromReader);
      msg.addFunc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.FuncListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.FuncListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuncList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      liderman_traderstack_stack_v1_stack_pb.StackFunc.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StackFunc func = 1;
 * @return {!Array<!proto.liderman.traderstack.stack.v1.StackFunc>}
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.prototype.getFuncList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.stack.v1.StackFunc>} */ (
    jspb.Message.getRepeatedWrapperField(this, liderman_traderstack_stack_v1_stack_pb.StackFunc, 1));
};


/** @param {!Array<!proto.liderman.traderstack.stack.v1.StackFunc>} value */
proto.liderman.traderstack.stack.v1.FuncListResponse.prototype.setFuncList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.liderman.traderstack.stack.v1.StackFunc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.stack.v1.StackFunc}
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.prototype.addFunc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.liderman.traderstack.stack.v1.StackFunc, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.stack.v1.FuncListResponse.prototype.clearFuncList = function() {
  this.setFuncList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stackId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemVariable: jspb.Message.getFieldWithDefault(msg, 2, ""),
    argumentId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest;
  return proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStackId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemVariable(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setArgumentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStackId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItemVariable();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgumentId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string stack_id = 1;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.prototype.getStackId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.prototype.setStackId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string item_variable = 2;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.prototype.getItemVariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.prototype.setItemVariable = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string argument_id = 3;
 * @return {string}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.prototype.getArgumentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListRequest.prototype.setArgumentId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    variablesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse;
  return proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string variables = 1;
 * @return {!Array<string>}
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.prototype.getVariablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.prototype.setVariablesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.prototype.addVariables = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.stack.v1.FuncArgumentVarListResponse.prototype.clearVariablesList = function() {
  this.setVariablesList([]);
};


goog.object.extend(exports, proto.liderman.traderstack.stack.v1);
