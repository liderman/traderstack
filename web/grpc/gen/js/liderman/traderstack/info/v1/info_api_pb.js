/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var liderman_traderstack_info_v1_info_pb = require('../../../../liderman/traderstack/info/v1/info_pb.js');
goog.object.extend(proto, liderman_traderstack_info_v1_info_pb);
goog.exportSymbol('proto.liderman.traderstack.info.v1.AccountsRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.AccountsResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.SandboxAccountsRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.SandboxAccountsResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.SandboxPayInRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.SandboxPayInResponse', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.SearchInstrumentRequest', null, global);
goog.exportSymbol('proto.liderman.traderstack.info.v1.SearchInstrumentResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.SearchInstrumentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.SearchInstrumentRequest.displayName = 'proto.liderman.traderstack.info.v1.SearchInstrumentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.info.v1.SearchInstrumentResponse.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.SearchInstrumentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.SearchInstrumentResponse.displayName = 'proto.liderman.traderstack.info.v1.SearchInstrumentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.AccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.AccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.AccountsRequest.displayName = 'proto.liderman.traderstack.info.v1.AccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.AccountsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.info.v1.AccountsResponse.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.AccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.AccountsResponse.displayName = 'proto.liderman.traderstack.info.v1.AccountsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.SandboxAccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.SandboxAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.SandboxAccountsRequest.displayName = 'proto.liderman.traderstack.info.v1.SandboxAccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.info.v1.SandboxAccountsResponse.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.SandboxAccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.SandboxAccountsResponse.displayName = 'proto.liderman.traderstack.info.v1.SandboxAccountsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.displayName = 'proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.displayName = 'proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.displayName = 'proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.repeatedFields_, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.displayName = 'proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.SandboxPayInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.SandboxPayInRequest.displayName = 'proto.liderman.traderstack.info.v1.SandboxPayInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liderman.traderstack.info.v1.SandboxPayInResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liderman.traderstack.info.v1.SandboxPayInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liderman.traderstack.info.v1.SandboxPayInResponse.displayName = 'proto.liderman.traderstack.info.v1.SandboxPayInResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.SearchInstrumentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.SearchInstrumentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.SearchInstrumentRequest}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.SearchInstrumentRequest;
  return proto.liderman.traderstack.info.v1.SearchInstrumentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.SearchInstrumentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.SearchInstrumentRequest}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.SearchInstrumentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.SearchInstrumentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ticker = 1;
 * @return {string}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.info.v1.SearchInstrumentRequest.prototype.setTicker = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.SearchInstrumentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.SearchInstrumentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrumentsList: jspb.Message.toObjectList(msg.getInstrumentsList(),
    liderman_traderstack_info_v1_info_pb.Instrument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.SearchInstrumentResponse}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.SearchInstrumentResponse;
  return proto.liderman.traderstack.info.v1.SearchInstrumentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.SearchInstrumentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.SearchInstrumentResponse}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_info_v1_info_pb.Instrument;
      reader.readMessage(value,liderman_traderstack_info_v1_info_pb.Instrument.deserializeBinaryFromReader);
      msg.addInstruments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.SearchInstrumentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.SearchInstrumentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      liderman_traderstack_info_v1_info_pb.Instrument.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Instrument instruments = 1;
 * @return {!Array<!proto.liderman.traderstack.info.v1.Instrument>}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.prototype.getInstrumentsList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.info.v1.Instrument>} */ (
    jspb.Message.getRepeatedWrapperField(this, liderman_traderstack_info_v1_info_pb.Instrument, 1));
};


/** @param {!Array<!proto.liderman.traderstack.info.v1.Instrument>} value */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.prototype.setInstrumentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.liderman.traderstack.info.v1.Instrument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.info.v1.Instrument}
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.prototype.addInstruments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.liderman.traderstack.info.v1.Instrument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.info.v1.SearchInstrumentResponse.prototype.clearInstrumentsList = function() {
  this.setInstrumentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.AccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.AccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.AccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.AccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.AccountsRequest}
 */
proto.liderman.traderstack.info.v1.AccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.AccountsRequest;
  return proto.liderman.traderstack.info.v1.AccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.AccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.AccountsRequest}
 */
proto.liderman.traderstack.info.v1.AccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.AccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.AccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.AccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.AccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.info.v1.AccountsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.AccountsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.AccountsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.AccountsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.AccountsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    liderman_traderstack_info_v1_info_pb.Account.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.AccountsResponse}
 */
proto.liderman.traderstack.info.v1.AccountsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.AccountsResponse;
  return proto.liderman.traderstack.info.v1.AccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.AccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.AccountsResponse}
 */
proto.liderman.traderstack.info.v1.AccountsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_info_v1_info_pb.Account;
      reader.readMessage(value,liderman_traderstack_info_v1_info_pb.Account.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.AccountsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.AccountsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.AccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.AccountsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      liderman_traderstack_info_v1_info_pb.Account.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Account accounts = 1;
 * @return {!Array<!proto.liderman.traderstack.info.v1.Account>}
 */
proto.liderman.traderstack.info.v1.AccountsResponse.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.info.v1.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, liderman_traderstack_info_v1_info_pb.Account, 1));
};


/** @param {!Array<!proto.liderman.traderstack.info.v1.Account>} value */
proto.liderman.traderstack.info.v1.AccountsResponse.prototype.setAccountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.liderman.traderstack.info.v1.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.info.v1.Account}
 */
proto.liderman.traderstack.info.v1.AccountsResponse.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.liderman.traderstack.info.v1.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.info.v1.AccountsResponse.prototype.clearAccountsList = function() {
  this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.SandboxAccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.SandboxAccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SandboxAccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.SandboxAccountsRequest}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.SandboxAccountsRequest;
  return proto.liderman.traderstack.info.v1.SandboxAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.SandboxAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.SandboxAccountsRequest}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.SandboxAccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.SandboxAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SandboxAccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.SandboxAccountsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.SandboxAccountsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    liderman_traderstack_info_v1_info_pb.Account.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.SandboxAccountsResponse}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.SandboxAccountsResponse;
  return proto.liderman.traderstack.info.v1.SandboxAccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.SandboxAccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.SandboxAccountsResponse}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_info_v1_info_pb.Account;
      reader.readMessage(value,liderman_traderstack_info_v1_info_pb.Account.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.SandboxAccountsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.SandboxAccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      liderman_traderstack_info_v1_info_pb.Account.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Account accounts = 1;
 * @return {!Array<!proto.liderman.traderstack.info.v1.Account>}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.info.v1.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, liderman_traderstack_info_v1_info_pb.Account, 1));
};


/** @param {!Array<!proto.liderman.traderstack.info.v1.Account>} value */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.prototype.setAccountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.liderman.traderstack.info.v1.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.info.v1.Account}
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.liderman.traderstack.info.v1.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.info.v1.SandboxAccountsResponse.prototype.clearAccountsList = function() {
  this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest;
  return proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse;
  return proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.info.v1.OpenSandboxAccountResponse.prototype.setAccountId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest;
  return proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.info.v1.GetSandboxPositionsRequest.prototype.setAccountId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    moneyList: jspb.Message.toObjectList(msg.getMoneyList(),
    liderman_traderstack_info_v1_info_pb.Money.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse;
  return proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new liderman_traderstack_info_v1_info_pb.Money;
      reader.readMessage(value,liderman_traderstack_info_v1_info_pb.Money.deserializeBinaryFromReader);
      msg.addMoney(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMoneyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      liderman_traderstack_info_v1_info_pb.Money.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Money money = 1;
 * @return {!Array<!proto.liderman.traderstack.info.v1.Money>}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.prototype.getMoneyList = function() {
  return /** @type{!Array<!proto.liderman.traderstack.info.v1.Money>} */ (
    jspb.Message.getRepeatedWrapperField(this, liderman_traderstack_info_v1_info_pb.Money, 1));
};


/** @param {!Array<!proto.liderman.traderstack.info.v1.Money>} value */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.prototype.setMoneyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.liderman.traderstack.info.v1.Money=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liderman.traderstack.info.v1.Money}
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.prototype.addMoney = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.liderman.traderstack.info.v1.Money, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.liderman.traderstack.info.v1.GetSandboxPositionsResponse.prototype.clearMoneyList = function() {
  this.setMoneyList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.SandboxPayInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.SandboxPayInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.SandboxPayInRequest}
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.SandboxPayInRequest;
  return proto.liderman.traderstack.info.v1.SandboxPayInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.SandboxPayInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.SandboxPayInRequest}
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.SandboxPayInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.SandboxPayInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.prototype.setAccountId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.liderman.traderstack.info.v1.SandboxPayInRequest.prototype.setAmount = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liderman.traderstack.info.v1.SandboxPayInResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.liderman.traderstack.info.v1.SandboxPayInResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liderman.traderstack.info.v1.SandboxPayInResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SandboxPayInResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liderman.traderstack.info.v1.SandboxPayInResponse}
 */
proto.liderman.traderstack.info.v1.SandboxPayInResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liderman.traderstack.info.v1.SandboxPayInResponse;
  return proto.liderman.traderstack.info.v1.SandboxPayInResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liderman.traderstack.info.v1.SandboxPayInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liderman.traderstack.info.v1.SandboxPayInResponse}
 */
proto.liderman.traderstack.info.v1.SandboxPayInResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liderman.traderstack.info.v1.SandboxPayInResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liderman.traderstack.info.v1.SandboxPayInResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liderman.traderstack.info.v1.SandboxPayInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liderman.traderstack.info.v1.SandboxPayInResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.liderman.traderstack.info.v1);
